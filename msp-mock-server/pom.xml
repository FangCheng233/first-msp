<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>first-msp</artifactId>
        <groupId>com.fc.msp</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>msp-mock-server</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>msp-mock-server</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <spring-cloud.version>Hoxton.SR6</spring-cloud.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.47</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <!-- apollo 配置中心 -->
        <dependency>
            <groupId>com.ctrip.framework.apollo</groupId>
            <artifactId>apollo-client</artifactId>
            <version>1.6.2</version>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlet</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
    </dependencies>

<!--    <build>-->
<!--        <sourceDirectory>src/main/java</sourceDirectory>-->
<!--        <resources>-->
<!--            &lt;!&ndash; 把src/main/resources目录下所有的文件拷贝到conf目录中 &ndash;&gt;-->
<!--            <resource>-->
<!--                <directory>src/main/resources</directory>-->
<!--                <targetPath>${project.build.directory}/conf</targetPath>-->
<!--            </resource>-->
<!--            &lt;!&ndash; 把lib目录下所有的文件拷贝到lib目录中-->
<!--            （可能有些jar包没有办法在maven中找到，需要放在lib目录中） &ndash;&gt;-->
<!--            <resource>-->
<!--                <directory>lib</directory>-->
<!--                <targetPath>${project.build.directory}/lib</targetPath>-->
<!--            </resource>-->
<!--            &lt;!&ndash; 把放在根目录下的脚本文件.sh,.bat拷贝到bin目录中 &ndash;&gt;-->
<!--            <resource>-->
<!--                <directory>.</directory>-->
<!--                <includes>-->
<!--                    <include>**/*.sh</include>-->
<!--                    <include>**/*.bat</include>-->
<!--                </includes>-->
<!--                <targetPath>${project.build.directory}/bin</targetPath>-->
<!--            </resource>-->
<!--        </resources>-->

<!--        <plugins>-->
<!--            &lt;!&ndash; 用于编译的plugin &ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-compiler-plugin</artifactId>-->
<!--                <version>3.8.1</version>-->
<!--                <configuration>-->
<!--                    <fork>true</fork>-->
<!--                    <source>1.8</source>-->
<!--                    <target>1.8</target>-->
<!--                    <encoding>UTF-8</encoding>-->
<!--                    &lt;!&ndash; 如果配置了JAVA_HOME,下面应该可以不用配 &ndash;&gt;-->
<!--&lt;!&ndash;                    <executable>C:\Program Files (x86)\Java\jdk1.8.0_91\bin\javac.exe</executable>&ndash;&gt;-->
<!--                </configuration>-->
<!--            </plugin>-->

<!--            &lt;!&ndash; 用于生成jar包的plugin &ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-jar-plugin</artifactId>-->
<!--                <version>3.2.0</version>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash; 把生成的jar包放在lib目录下（和其他所有jar包一起） &ndash;&gt;-->
<!--                    <outputDirectory>${project.build.directory}/lib</outputDirectory>-->
<!--                    <archive>-->
<!--                        <manifest>-->
<!--                            <addClasspath>true</addClasspath>-->
<!--                            <classpathPrefix>lib/</classpathPrefix>-->
<!--                        </manifest>-->
<!--                    </archive>-->
<!--                    <excludes>-->
<!--                        &lt;!&ndash; 排除掉一些文件,不要放到jar包中，-->
<!--                        这里是为了排除掉src/main/resources中的文件（它们应该放到conf目录）-->
<!--                        这里只能指定要排除的目标文件，而不能指定源文件，虽然不够完美，但是基本能达到目的。 &ndash;&gt;-->
<!--                        <exclude>*.xml</exclude>-->
<!--                        <exclude>*.yml</exclude>-->
<!--                        <exclude>*.properties</exclude>-->
<!--                    </excludes>-->
<!--                </configuration>-->
<!--            </plugin>-->

<!--            &lt;!&ndash; 用于拷贝maven依赖的plugin &ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-dependency-plugin</artifactId>-->
<!--                <version>3.1.1</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>copy-dependencies</id>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>copy-dependencies</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            &lt;!&ndash; 把依赖的所有maven jar包拷贝到lib目录中（这样所有的jar包都在lib目录中） &ndash;&gt;-->
<!--                            <outputDirectory>${project.build.directory}/lib</outputDirectory>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->

<!--            &lt;!&ndash; 用于拷贝resource的plugin &ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-resources-plugin</artifactId>-->
<!--                <version>3.1.0</version>-->
<!--                <configuration>-->
<!--                    <encoding>UTF-8</encoding>-->
<!--                </configuration>-->
<!--            </plugin>-->

<!--            &lt;!&ndash; 配置生成源代码jar的plugin &ndash;&gt;-->
<!--            <plugin>-->
<!--                <artifactId>maven-source-plugin</artifactId>-->
<!--                <version>3.0.1</version>-->
<!--                <configuration>-->
<!--                    <attach>true</attach>-->
<!--                    &lt;!&ndash; 配置源代码jar文件的存放路径，和其他jar文件一起放在lib目录 &ndash;&gt;-->
<!--                    <outputDirectory>${project.build.directory}/lib</outputDirectory>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <phase>compile</phase>-->
<!--                        <goals>-->
<!--                            <goal>jar</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-surefire-plugin</artifactId>-->
<!--                <configuration>-->
<!--                    <skip>true</skip>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--        </plugins>-->
<!--    </build>-->

</project>
